---
# Based on https://github.com/esphome/wake-word-voice-assistants/blob/main/esp32-s3-box-3/esp32-s3-box-3.yaml
# https://github.com/tetele/onju-voice-satellite/blob/main/esphome/onju-voice-microwakeword.yaml for the volume up/down touch buttons

substitutions:
  name: voice-assist
  friendly_name: Voice Assist
  voice_assist_idle_phase_id: "1"
  voice_assist_listening_phase_id: "2"
  voice_assist_thinking_phase_id: "3"
  voice_assist_replying_phase_id: "4"
  voice_assist_not_ready_phase_id: "10"
  voice_assist_error_phase_id: "11"
  voice_assist_muted_phase_id: "12"
  voice_assist_timer_finished_phase_id: "20"

  # INMP441
  mic_ws_pin: GPIO5
  mic_sck_pin: GPIO6
  mic_sd_pin: GPIO4

  # MAX98357A
  spk_lrc_pin: GPIO12
  spk_bclk_pin: GPIO13
  spk_din_pin: GPIO14

  esp32_touch_setup_mode: "false"

  mute_pin: GPIO11
  mute_pin_threshold: "160000"
  vol_down_pin: GPIO09
  vol_down_pin_threshold: "150000"
  vol_up_pin: GPIO10
  vol_up_pin_threshold: "150000"

esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  min_version: 2025.5.0
  on_boot:
    priority: 600
    then:
      - script.execute: draw_display
      - delay: 30s
      - if:
          condition:
            lambda: return id(init_in_progress);
          then:
            - lambda: id(init_in_progress) = false;
            - script.execute: draw_display

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  flash_size: 16MB
  cpu_frequency: 240MHz
  framework:
    type: esp-idf
    sdkconfig_options:
      CONFIG_ESP32S3_DEFAULT_CPU_FREQ_240: "y"
      CONFIG_ESP32S3_DATA_CACHE_64KB: "y"
      CONFIG_ESP32S3_DATA_CACHE_LINE_64B: "y"
      CONFIG_ESP32S3_INSTRUCTION_CACHE_32KB: "y"

      CONFIG_BT_ALLOCATION_FROM_SPIRAM_FIRST: "y"
      CONFIG_BT_BLE_DYNAMIC_ENV_MEMORY: "y"

      CONFIG_MBEDTLS_EXTERNAL_MEM_ALLOC: "y"
      CONFIG_MBEDTLS_SSL_PROTO_TLS1_3: "y"  # TLS1.3 support isn't enabled by default in IDF 5.1.5

psram:
  mode: octal
  speed: 80MHz

api:
  on_client_connected:
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: draw_display

ota:
  - platform: esphome
    id: ota_esphome

logger:
  hardware_uart: USB_SERIAL_JTAG
  level: INFO

wifi:
  on_connect:
    - script.execute: draw_display
  on_disconnect:
    - script.execute: draw_display

button:
  - platform: factory_reset
    id: factory_reset_btn
    name: Factory reset
  - platform: restart
    id: reset_btn
    name: Restart

esp32_touch:
  setup_mode: ${esp32_touch_setup_mode}
  measurement_duration: 0.25ms

binary_sensor:
  - platform: esp32_touch
    pin: ${mute_pin}
    threshold: ${mute_pin_threshold}
    id: mute_switch
    internal: true
    filters:
      - delayed_on: 50ms
    on_press:
      then:
        - if:
            condition:
              switch.is_on: timer_ringing
            then:
              - switch.turn_off: timer_ringing
            else:
              - switch.toggle: mute
  - platform: esp32_touch
    pin: ${vol_down_pin}
    threshold: ${vol_down_pin_threshold}
    id: volume_down
    internal: true
    filters:
      - delayed_on: 50ms
    on_press:
      then:
        - script.execute:
            id: set_volume
            volume_delta: -0.05
        - delay: 750ms
        - while:
            condition:
              binary_sensor.is_on: volume_down
            then:
              - script.execute:
                  id: set_volume
                  volume_delta: -0.05
              - delay: 150ms
  - platform: esp32_touch
    pin: ${vol_up_pin}
    threshold: ${vol_up_pin_threshold}
    id: volume_up
    internal: true
    filters:
      - delayed_on: 50ms
    on_press:
      then:
        - script.execute:
            id: set_volume
            volume_delta: 0.05
        - delay: 750ms
        - while:
            condition:
              binary_sensor.is_on: volume_up
            then:
              - script.execute:
                  id: set_volume
                  volume_delta: 0.05
              - delay: 150ms

light:
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: GPIO48
    num_leds: 1
    chipset: WS2812
    name: led
    id: led
    entity_category: config
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

i2s_audio:
  - id: i2s_in
    i2s_lrclk_pin: ${mic_ws_pin}
    i2s_bclk_pin: ${mic_sck_pin}
  - id: i2s_out
    i2s_lrclk_pin: ${spk_lrc_pin}
    i2s_bclk_pin: ${spk_bclk_pin}

microphone:
  - platform: i2s_audio
    id: box_mic
    sample_rate: 16000
    i2s_din_pin: ${mic_sd_pin}
    bits_per_sample: 16bit
    adc_type: external
    channel: left
    i2s_audio_id: i2s_in

speaker:
  - platform: i2s_audio
    id: box_speaker
    i2s_dout_pin: ${spk_din_pin}
    dac_type: external
    sample_rate: 48000
    bits_per_sample: 16bit
    channel: left
    i2s_audio_id: i2s_out
    buffer_duration: 100ms

media_player:
  - platform: speaker
    name: None
    id: speaker_media_player
    volume_min: 0.5
    volume_max: 1.0
    announcement_pipeline:
      speaker: box_speaker
      format: FLAC
      sample_rate: 48000
      num_channels: 1  # S3 Box only has one output channel
    files:
      - id: timer_finished_sound
        file: https://github.com/esphome/home-assistant-voice-pe/raw/dev/sounds/timer_finished.flac
    on_announcement:
      # Stop the wake word (mWW or VA) if the mic is capturing
      - if:
          condition:
            - microphone.is_capturing:
          then:
            - script.execute: stop_wake_word
            # Ensure VA stops before moving on
            - if:
                condition:
                  - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
                then:
                  - wait_until:
                      - not:
                          voice_assistant.is_running:
      # Since VA isn't running, this is user-initiated media playback. Draw the mute display
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
            - script.execute: draw_display
    on_idle:
      # Since VA isn't running, this is the end of user-initiated media playback. Restart the wake word.
      - if:
          condition:
            not:
              voice_assistant.is_running:
          then:
            - script.execute: start_wake_word
            - script.execute: set_idle_or_mute_phase
            - script.execute: draw_display

micro_wake_word:
  id: mww
  models:
    - okay_nabu
    - hey_mycroft
    - hey_jarvis
  on_wake_word_detected:
    - voice_assistant.start:
        wake_word: !lambda return wake_word;

voice_assistant:
  id: va
  microphone: box_mic
  media_player: speaker_media_player
  micro_wake_word: mww
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  on_listening:
    - lambda: id(voice_assistant_phase) = ${voice_assist_listening_phase_id};
    - text_sensor.template.publish:
        id: text_request
        state: "..."
    - text_sensor.template.publish:
        id: text_response
        state: "..."
    - script.execute: draw_display
  on_stt_vad_end:
    - lambda: id(voice_assistant_phase) = ${voice_assist_thinking_phase_id};
    - script.execute: draw_display
  on_stt_end:
    - text_sensor.template.publish:
        id: text_request
        state: !lambda return x;
    - script.execute: draw_display
  on_tts_start:
    - text_sensor.template.publish:
        id: text_response
        state: !lambda return x;
    - lambda: id(voice_assistant_phase) = ${voice_assist_replying_phase_id};
    - script.execute: draw_display
  on_end:
    # Wait a short amount of time to see if an announcement starts
    - wait_until:
        condition:
          - media_player.is_announcing:
        timeout: 0.5s
    # Announcement is finished and the I2S bus is free
    - wait_until:
        - and:
            - not:
                media_player.is_announcing:
            - not:
                speaker.is_playing:
    # Restart only mWW if enabled; streaming wake words automatically restart
    - if:
        condition:
          - lambda: return id(wake_word_engine_location).state == "On device";
        then:
          - lambda: id(va).set_use_wake_word(false);
          - micro_wake_word.start:
    - if:
        condition:
          not:
            voice_assistant.is_running:
        then:
          - script.execute: set_idle_or_mute_phase
          - script.execute: draw_display
  on_error:
    - if:
        condition:
          lambda: return !id(init_in_progress);
        then:
          - lambda: id(voice_assistant_phase) = ${voice_assist_error_phase_id};
          - script.execute: draw_display
          - delay: 1s
          - if:
              condition:
                switch.is_off: mute
              then:
                - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
              else:
                - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
          - script.execute: draw_display
  on_client_connected:
    - lambda: id(init_in_progress) = false;
    - script.execute: start_wake_word
    - script.execute: set_idle_or_mute_phase
    - script.execute: draw_display
  on_client_disconnected:
    - script.execute: stop_wake_word
    - lambda: id(voice_assistant_phase) = ${voice_assist_not_ready_phase_id};
    - script.execute: draw_display
  on_timer_finished:
    - switch.turn_on: timer_ringing
    - wait_until:
        media_player.is_announcing:
    - lambda: id(voice_assistant_phase) = ${voice_assist_timer_finished_phase_id};
    - script.execute: draw_display

script:
  - id: set_volume
    mode: restart
    parameters:
      volume_delta: float
    then:
      - media_player.volume_set: !lambda return clamp(id(speaker_media_player).volume + volume_delta, 0.0f, 1.0f);

  - id: draw_display
    then:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - if:
                condition:
                  wifi.connected:
                then:
                  - if:
                      condition:
                        api.connected:
                      then:
                        - lambda: |
                            std::string phase;
                            switch(id(voice_assistant_phase)) {
                              case ${voice_assist_listening_phase_id}:
                                phase = "Listening";
                                id(led).turn_on().set_brightness(1.0).set_rgb(0.0, 0.0, 1.0).set_effect("None").perform();
                                break;
                              case ${voice_assist_thinking_phase_id}:
                                phase = "Thinking";
                                id(led).turn_on().set_brightness(1.0).set_rgb(0.0, 1.0, 1.0).set_effect("Fast Pulse").perform();
                                break;
                              case ${voice_assist_replying_phase_id}:
                                phase = "Replying";
                                id(led).turn_on().set_brightness(1.0).set_rgb(1.0, 0.0, 1.0).set_effect("None").perform();
                                break;
                              case ${voice_assist_error_phase_id}:
                                phase = "Error";
                                id(led).turn_on().set_brightness(1.0).set_rgb(1.0, 0.0, 0.0).set_effect("Fast Pulse").perform();
                                break;
                              case ${voice_assist_muted_phase_id}:
                                phase = "Muted";
                                id(led).turn_on().set_brightness(1.0).set_rgb(1.0, 0.6, 0.0).set_effect("None").perform();
                                break;
                              case ${voice_assist_not_ready_phase_id}:
                                phase = "Not ready";
                                id(led).turn_on().set_brightness(1.0).set_rgb(1.0, 0.6, 0.0).set_effect("Fast Pulse").perform();
                                break;
                              case ${voice_assist_timer_finished_phase_id}:
                                phase = "Timer finished";
                                id(led).turn_on().set_brightness(1.0).set_rgb(1.0, 0.6, 0.8).set_effect("Slow Pulse").perform();
                                break;
                              default:
                                phase = "Idle";
                                id(led).turn_on().set_brightness(1.0).set_rgb(0.0, 1.0, 0.0).set_effect("None").perform();
                            }
                            id(status).publish_state(phase);
                      else:
                        - lambda: |
                            id(led).turn_on().set_brightness(1.0).set_rgb(1.0, 0.0, 0.0).set_effect("Slow Pulse").perform();
                            id(status).publish_state("Not connected to HA");
                else:
                  - lambda: |
                      id(led).turn_on().set_brightness(1.0).set_rgb(1.0, 0.0, 0.0).set_effect("Slow Pulse").perform();
                      id(status).publish_state("No wifi");
          else:
            - lambda: |
                id(led).turn_on().set_brightness(1.0).set_rgb(0.5, 0.25, 1.0).set_effect("Slow Pulse").perform();
                id(status).publish_state("Initializing");

  - id: fetch_first_active_timer
    then:
  - id: check_if_timers_active
    then:
  - id: fetch_first_timer
    then:
  - id: check_if_timers
    then:
  - id: draw_timer_timeline
    then:
  - id: draw_active_timer_widget
    then:
  # Starts either mWW or the streaming wake word, depending on the configured location
  - id: start_wake_word
    then:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - micro_wake_word.start:
      - if:
          condition:
            and:
              - not:
                  - voice_assistant.is_running:
              - lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(true);
            - voice_assistant.start_continuous:
  # Stops either mWW or the streaming wake word, depending on the configured location
  - id: stop_wake_word
    then:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "In Home Assistant";
          then:
            - lambda: id(va).set_use_wake_word(false);
            - voice_assistant.stop:
      - if:
          condition:
            lambda: return id(wake_word_engine_location).state == "On device";
          then:
            - micro_wake_word.stop:
  # Set the voice assistant phase to idle or muted, depending on if the software mute switch is activated
  - id: set_idle_or_mute_phase
    then:
      - if:
          condition:
            switch.is_off: mute
          then:
            - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
          else:
            - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};

switch:
  - platform: template
    name: Mute
    id: mute
    icon: "mdi:microphone-off"
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    entity_category: config
    on_turn_off:
      - microphone.unmute:
      - lambda: id(voice_assistant_phase) = ${voice_assist_idle_phase_id};
      - script.execute: draw_display
    on_turn_on:
      - microphone.mute:
      - lambda: id(voice_assistant_phase) = ${voice_assist_muted_phase_id};
      - script.execute: draw_display
  - platform: template
    id: timer_ringing
    optimistic: true
    internal: true
    restore_mode: ALWAYS_OFF
    on_turn_off:
      # Turn off the repeat mode and disable the pause between playlist items
      - lambda: |-
              id(speaker_media_player)
                ->make_call()
                .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_OFF)
                .set_announcement(true)
                .perform();
              id(speaker_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 0);
      # Stop playing the alarm
      - media_player.stop:
          announcement: true
    on_turn_on:
      # Turn on the repeat mode and pause for 1000 ms between playlist items/repeats
      - lambda: |-
            id(speaker_media_player)
              ->make_call()
              .set_command(media_player::MediaPlayerCommand::MEDIA_PLAYER_COMMAND_REPEAT_ONE)
              .set_announcement(true)
              .perform();
            id(speaker_media_player)->set_playlist_delay_ms(speaker::AudioPipelineType::ANNOUNCEMENT, 1000);
      - media_player.speaker.play_on_device_media_file:
          media_file: timer_finished_sound
          announcement: true
      - delay: 15min
      - switch.turn_off: timer_ringing

select:
  - platform: template
    entity_category: config
    name: Wake word engine location
    id: wake_word_engine_location
    icon: "mdi:account-voice"
    optimistic: true
    restore_value: true
    options:
      - In Home Assistant
      - On device
    initial_option: On device
    on_value:
      - if:
          condition:
            lambda: return !id(init_in_progress);
          then:
            - wait_until:
                lambda: return id(voice_assistant_phase) == ${voice_assist_muted_phase_id} || id(voice_assistant_phase) == ${voice_assist_idle_phase_id};
            - if:
                condition:
                  lambda: return x == "In Home Assistant";
                then:
                  - micro_wake_word.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - lambda: id(va).set_use_wake_word(true);
                        - voice_assistant.start_continuous:
            - if:
                condition:
                  lambda: return x == "On device";
                then:
                  - lambda: id(va).set_use_wake_word(false);
                  - voice_assistant.stop
                  - delay: 500ms
                  - if:
                      condition:
                        switch.is_off: mute
                      then:
                        - micro_wake_word.start

globals:
  - id: init_in_progress
    type: bool
    restore_value: false
    initial_value: "true"
  - id: voice_assistant_phase
    type: int
    restore_value: false
    initial_value: ${voice_assist_not_ready_phase_id}

text_sensor:
  - id: status
    name: Voice assist status
    entity_category: diagnostic
    platform: template

  - id: text_request
    name: Voice assist request
    entity_category: diagnostic
    platform: template

  - id: text_response
    name: Voice assist response
    entity_category: diagnostic
    platform: template
